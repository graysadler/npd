<?php

/**
 * Implements hook_block_info().
 */
function md_theme_block_info() {
  $blocks['gmap'] = array(
    'info' => t('[MD] Google Maps'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}


/**
 * Implements hook_block_configure().
 * @param string $delta
 * @return array
 */
function md_theme_block_configure($delta = '') {
  $form = array();
  $map_zoom = array();
  for ($i = 1; $i < 21; $i++) {
    $map_zoom[$i] = $i;
  }
  $media_file = array('fid' => variable_get('map_marker', 0));
  if ($media_file['fid'] && ($media_file = file_load($media_file['fid']))) {
    $media_file = get_object_vars($media_file);
  }
  switch ($delta) {
    case 'gmap':
      $form['map_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Google Maps Settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      $form['map_settings']['map_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Marker Title'),
        '#default_value' => variable_get('map_title', 'Megadrupal Vietnam'),
        '#size' => 60,
        '#maxlength' => 128,
        '#required' => TRUE,
      );
      $form['map_settings']['map_description'] = array(
        '#type' => 'textarea',
        '#description' => t(''),
        '#default_value' => variable_get('map_description', 'Ha Noi , Viet Nam, Asia.'),
      );
      $form['map_settings']['map_location'] = array(
        '#type' => 'textfield',
        '#title' => t('Google Map Location'),
        '#default_value' => variable_get('map_location', '40.761467,-73.956379'),
        '#size' => 60,
        '#required' => TRUE,
        '#description' => t('You can find <a target="_blank" href="http://itouchmap.com/latlong.html">here</a>'),
      );
      $form['map_settings']['map_marker'] = array(
        '#type' => 'media',
        '#title' => t("Choose Map Marker"),
        '#default_value' => $media_file,
        '#weight' => -14,
        '#input' => TRUE,
        '#extended' => TRUE
      );
      $form['map_settings']['map_zoom'] = array(
        '#type' => 'select',
        '#title' => t('Choose Map Zoom'),
        '#options' => $map_zoom,
        '#default_value' => variable_get('map_zoom', '10'),
      );

      $form['map_settings']['map_style'] = array(
        '#type' => 'select',
        '#title' => t('Choose Style'),
        '#options' => array(
          'grayscale' => t('Gray scale'),
          'blue' => t('Blue'),
          'dark' => t('Dark'),
          'pink' => t('Pink'),
          'light' => t('Light'),
          'blueessence' => t('Blue Essence'),
          'bentley' => t('Bentley'),
          'retro' => t('Retro'),
          'cobalt' => t('Cobalt'),
          'brownie' => t('Brownie'),

        ),
        '#default_value' => variable_get('map_style', 'dark'),
      );
      break;
  }

  return $form;
}


/**
 * Implements hook_form_alter().
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function md_theme_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'block_admin_configure' || $form_id == 'block_add_block_form') {
    if ($form['delta']['#value'] != 'main') {

      // Load statically cached block object used to display the form.
      if (isset($form['delta']['#value'])) {
        $block = block_load($form['module']['#value'], $form['delta']['#value']);
        $data = isset($block->data) ? unserialize($block->data) : '';
      }
      $media_file = array('fid' => isset($data['bg_image']['fid']) ? intval($data['bg_image']['fid']) : 0);
      if ($media_file['fid'] && ($media_file = file_load($media_file['fid']))) {
        $media_file = get_object_vars($media_file);
      }

      $form['settings']['sub_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Sub title Block'),
        '#default_value' => isset($data['sub_title']) ? $data['sub_title'] : '',
        '#size' => 60,
        '#weight' => -15,
        '#maxlength' => 128,
      );
      $form['settings']['custom_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Custom ID for block'),
        '#default_value' => isset($data['custom_id']) ? $data['custom_id'] : '',
        '#description' => t(''),
        '#size' => 60,
        '#weight' => -15,
        '#maxlength' => 128,
      );
      $form['settings']['custom_class'] = array(
        '#type' => 'textfield',
        '#title' => t('Custom class for block'),
        '#default_value' => isset($data['custom_class']) ? $data['custom_class'] : '',
        '#size' => 60,
        '#weight' => -15,
        '#maxlength' => 128,
      );
      $form['settings']['block_section'] = array(
        '#type' => 'select',
        '#title' => t('Choose type of block'),
        '#options' => array(
          0 => t('Widget Sidebar'),
          1 => t('Section Content'),
          3 => t('Header Block'),
          2 => t('Normal')
        ),
        '#default_value' => isset($data['block_section']) ? $data['block_section'] : 2,
      );
      if (!in_array($form['module']['#value'], array(
        'md_header',
        'md_slider',
        'md_fullscreen_slider'
      ))
      ) {
        $form['#attached']['js'] = array(
          drupal_get_path('module', 'md_theme') . '/js/spectrum.js',
          drupal_get_path('module', 'md_theme') . '/js/md-theme.js',
        );
        $form['#attached']['css'] = array(
          drupal_get_path('module', 'md_theme') . '/css/spectrum.css',
        );
        $form['settings']['bg_settings'] = array(
          '#type' => 'fieldset',
          '#title' => t('Background Settings'),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
        );
        $form['settings']['bg_settings']['bg_parallax'] = array(
          '#type' => 'checkbox',
          '#title' => t('Enable Parallax Background Image'),
          '#default_value' => isset($data['bg_parallax']) ? $data['bg_parallax'] : FALSE,
        );
        $form['settings']['bg_settings']['bg_image'] = array(
          '#type' => 'media',
          '#title' => t("Choose background images"),
          '#default_value' => $media_file,
          '#weight' => -14,
          '#input' => TRUE,
          '#extended' => TRUE
        );

        $form['settings']['bg_settings']['bg_color'] = array(
          '#type' => 'textfield',
          '#title' => t('Choose Background color'),
          '#default_value' => isset($data['bg_color']) ? $data['bg_color'] : '',
          '#size' => 60,
          '#weight' => -13,
          '#maxlength' => 128,
          '#attributes' => array(
            'class' => array('input-spectrum')
          )
        );

        $form['settings']['bg_settings']['bg_overlay'] = array(
          '#type' => 'textfield',
          '#title' => t('Choose Background Overlay'),
          '#default_value' => isset($data['bg_overlay']) ? $data['bg_overlay'] : '',
          '#size' => 60,
          '#weight' => -12,
          '#maxlength' => 128,
          '#attributes' => array(
            'class' => array('input-spectrum')
          )
        );
        if ($form['module']['#value'] == 'block') {
          $form['settings']['bg_settings']['full_width'] = array(
            '#type' => 'checkbox',
            '#title' => t('Check if you block full width window'),
            '#default_value' => isset($data['full_width']) ? $data['full_width'] : FALSE,
          );
          $form['settings']['bg_settings']['settings_video'] = array(
            '#type' => 'fieldset',
            '#title' => t('Background video settings'),
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
            '#states' => array(
              'visible' => array(
                ':input[name="animation"]' => array('checked' => FALSE),
              ),
            ),
          );
          $form['settings']['bg_settings']['settings_video']['enable_video'] = array(
            '#type' => 'checkbox',
            '#title' => t('Enable video background'),
            '#default_value' => isset($data['enable_video']) ? $data['enable_video'] : FALSE,
          );
          $form['settings']['bg_settings']['settings_video']['video_id'] = array(
            '#type' => 'textfield',
            '#title' => 'Background video',
            '#description' => t('Enter ID youtube video'),
            '#default_value' => isset($data['video_id']) ? $data['video_id'] : '',
          );
          $form['settings']['bg_settings']['settings_video']['show_control'] = array(
            '#type' => 'checkbox',
            '#default_value' => isset($data['show_control']) ? $data['show_control'] : FALSE,
            '#title' => t('Show control video in background.')
          );
          $form['settings']['bg_settings']['settings_video']['auto_play'] = array(
            '#type' => 'checkbox',
            '#default_value' => isset($data['auto_play']) ? $data['auto_play'] : FALSE,
            '#title' => t('Auto play video when page loaded.')
          );
          $form['settings']['bg_settings']['settings_video']['mute'] = array(
            '#type' => 'checkbox',
            '#default_value' => isset($data['mute']) ? $data['mute'] : TRUE,
            '#title' => t('Mute video when video play.')
          );
          $form['settings']['bg_settings']['settings_animation'] = array(
            '#type' => 'fieldset',
            '#title' => t('Animations settings'),
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
            '#states' => array(
              'visible' => array(
                ':input[name="enable_video"]' => array('checked' => FALSE),
              ),
            ),
          );
          $form['settings']['bg_settings']['settings_animation']['animation'] = array(
            '#type' => 'checkbox',
            '#default_value' => isset($data['animation']) ? $data['animation'] : FALSE,
            '#title' => t('Enable Animation for this header block.')
          );

          $form['settings']['bg_settings']['settings_animation']['animation_value'] = array(
            '#type' => 'select',
            '#options' => array(
              0 => 'Animation Lines',
              1 => 'Animation Bubbles',
              2 => 'Animation Fountain',
              3 => 'Animation Fountain',
            ),
            '#states' => array(
              'visible' => array(
                ':input[name="animation"]' => array('checked' => TRUE),
              ),
            ),
            '#title' => t('Choose Animation.'),
            '#default_value' => isset($data['animation_value']) ? $data['animation_value'] : 0,
          );
        }
      }
      $form['#submit'][] = 'md_theme_form_submit';
    }
  }
}


/**
 * Handler Submit Custom data block
 * @param $form
 * @param $form_state
 */
function md_theme_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  //Set custom data
  $data = array();
  if ($values['sub_title'] != '') {
    $data['sub_title'] = $values['sub_title'];
  }
  if ($values['custom_id'] != '') {
    $data['custom_id'] = $values['custom_id'];
  }
  if ($values['custom_class'] != '') {
    $data['custom_class'] = $values['custom_class'];
  }
  $data['block_section'] = $values['block_section'];
  if (isset($values['bg_parallax'])){
    $data['bg_parallax'] = $values['bg_parallax'];
  }
  if (isset($values['bg_image']['fid']) && $values['bg_image']['fid'] != 0) {
    $data['bg_image'] = $values['bg_image'];
  }
  if (isset($values['bg_color']) && $values['bg_color'] != '') {
    $data['bg_color'] = $values['bg_color'];
  }
  if (isset($values['bg_overlay']) && $values['bg_overlay'] != '') {
    $data['bg_overlay'] = $values['bg_overlay'];
  }

  // data custom Block
  if (isset($values['full_width'])) {
    $data['full_width'] = $values['full_width'];
  }
  if (isset($values['enable_video'])) {
    $data['enable_video'] = $values['enable_video'];
  }
  if (isset($values['video_id'])) {
    $data['video_id'] = $values['video_id'];
  }
  if (isset($values['show_control'])) {
    $data['show_control'] = $values['show_control'];
  }
  if (isset($values['auto_play'])) {
    $data['auto_play'] = $values['auto_play'];
  }
  if (isset($values['mute'])) {
    $data['mute'] = $values['mute'];
  }
  if (isset($values['animation'])) {
    $data['animation'] = $values['animation'];
  }
  if (isset($values['animation_value'])) {
    $data['animation_value'] = $values['animation_value'];
  }


  //Update custom data
  db_update('block')
    ->fields(array('data' => serialize($data)))
    ->condition('module', $form_state['values']['module'])
    ->condition('delta', $form_state['values']['delta'])
    ->execute();

  // Flush all context module cache to use the updated css_class.
  if (module_exists('context')) {
    cache_clear_all('context', 'cache', TRUE);
  }
}

/**
 * Implements hook_block_save().
 * @param string $delta
 * @param array $edit
 */
function md_theme_block_save($delta = '', $edit = array()) {
  if ($delta == 'gmap') {
    variable_set('map_title', $edit['map_title']);
    variable_set('map_description', $edit['map_description']);
    variable_set('map_location', $edit['map_location']);
    variable_set('map_style', $edit['map_style']);
    variable_set('map_marker', $edit['map_marker']['fid']);
  }
}


/**
 * Implements hook_block_view().
 * @param string $delta
 * @return
 */
function md_theme_block_view($delta = '') {
  $path = drupal_get_path('module', 'md_theme');
  switch ($delta) {
    case 'gmap':
      $config = array();
      $config['title'] = variable_get('map_title', 'Megadrupal Vietnam');
      $config['description'] = variable_get('map_description', 'Ha Noi , Viet Nam, Asia.');
      $config['location'] = variable_get('map_location', '40.761467,-73.956379');
      $config['zoom'] = variable_get('map_zoom', '10');
      $fid = variable_get('map_marker', '0');
      if ($file = file_load($fid)) {
        $config['marker'] = file_create_url($file->uri);
      }

      $config['theme'] = variable_get('map_style', 'dark');

      drupal_add_js('http://maps.google.com/maps/api/js?sensor=false', 'external');
      drupal_add_js($path . '/js/gmap.js');
      $block['content'] = theme('gmap', array('config' => $config));
      break;
  }
  return $block;
}


/**
 * Implement hook_preprocess_block()
 * @param $vars
 */
function md_theme_preprocess_block(&$vars) {
  $data = isset($vars['elements']['#block']->data) ? unserialize($vars['elements']['#block']->data) : '';
  $path = drupal_get_path('module', 'md_theme');
  $module = $vars['block']->module;
  if (is_array($data)) {
    $vars['block_config'] = $data;
    if (isset($data['block_section'])) {
      $vars['block_section'] = $data['block_section'];
      if ($module == 'block' && $data['block_section'] == 3) {
        $vars['theme_hook_suggestions'][] = 'block__block__header';
        drupal_add_js("{$path}/js/jquery.simple-text-rotator.min.js");
        drupal_add_js("{$path}/js/header-block.js");
      }
    }
    if (isset($data['bg_image'])) {
      $file = file_load($data['bg_image']['fid']);
      $vars['attributes_array']['data-image-src'] = file_create_url($file->uri);
    }
    if (isset($data['enable_video'])) {
      drupal_add_js("{$path}/js/jquery.mb.YTPlayer.js");
      drupal_add_css("{$path}/css/YTPlayer.css");
    }
    if (isset($data['animation']) && $data['animation'] == 1) {
      drupal_add_js("{$path}/js/TweenLite.min.js");
      drupal_add_js("{$path}/js/EasePack.min.js");
      drupal_add_js("{$path}/js/rAF.js");
      drupal_add_js("{$path}/js/animation-{$data['animation_value']}.js", array('scope' => 'footer'));
    }
    if (isset($data['bg_color'])) {
      $vars['attributes_array']['data-bg-color'] = $data['bg_color'];
    }
    if (isset($data['bg_overlay'])) {
      $vars['overlay'] = TRUE;
      $vars['attributes_array']['data-overlay'] = $data['bg_overlay'];
    }
    if(isset($data['bg_parallax']) && $data['bg_parallax'] == 1){
      $vars['attributes_array']['data-parallax'] = 'scroll';
      $vars['classes_array'][] = 'parallax-window';
    }
    if (isset($data['custom_id'])) {
      $vars['block_html_id'] = drupal_html_id($data['custom_id']);
    }
    if (isset($data['custom_class'])) {
      $block_type = $data['block_section'] == 0 ? array('widget') : array('');
      $custom_class = explode(" ", $data['custom_class']);
      $vars['classes_array'] = array_merge($custom_class, $vars['classes_array']);
      $vars['classes_array'] = array_merge($block_type, $vars['classes_array']);
    }

  }
}


/**
 * Implements hook_theme().
 */
function md_theme_theme($existing, $type, $theme, $path) {
  $themes = array();
  $path = drupal_get_path('module', 'md_theme') . '/templates';
  $themes['gmap'] = array(
    'path' => $path,
    'template' => 'gmap',
    'variable' => array('config' => NULL)
  );
  return $themes;
}

/**
 * Implement hook_preprocess_gmap()
 * @param $vars
 */
function template_preprocess_gmap(&$vars) {
  foreach ($vars['config'] as $data => $value) {
    $vars['attributes_array']['data-' . $data] = $value;
  }
}


function md_theme_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['form_element'])) {
    $theme_registry['form_element']['function'] = 'md_theme_form_element';
  }
  if (!empty($theme_registry['radio'])) {
    $theme_registry['radio']['function'] = 'md_theme_radio';
  }
  if (!empty($theme_registry['form_element_label'])) {
    $theme_registry['form_element_label']['function'] = 'md_theme_form_element_label';
  }
}


// Alter form
function md_theme_form_element($variables) {
  $element = &$variables['element'];
  $element += array(
    '#title_display' => 'before',
  );

  if (isset($element['#markup']) && !empty($element['#id'])) {
    $attributes['id'] = $element['#id'];
  }
  $attributes['class'] = array('form-item');
  if (!empty($element['#type'])) {
    $attributes['class'][] = 'form-type-' . strtr($element['#type'], '_', '-');
  }
  if (!empty($element['#name'])) {
    $attributes['class'][] = 'form-item-' . strtr($element['#name'], array(
        ' ' => '-',
        '_' => '-',
        '[' => '-',
        ']' => ''
      ));
  }
  if (!empty($element['#attributes']['disabled'])) {
    $attributes['class'][] = 'form-disabled';
  }
  $output = '<div' . drupal_attributes($attributes) . '><div class="form-elements">' . "\n";

  if (!isset($element['#title'])) {
    $element['#title_display'] = 'none';
  }
  $prefix = isset($element['#field_prefix']) ? '' . $element['#field_prefix'] . '' : '';
  $suffix = isset($element['#field_suffix']) ? '' . $element['#field_suffix'] . '' : '';

  switch ($element['#title_display']) {
    case 'before':
    case 'invisible':
      $output .= ' ' . theme('form_element_label', $variables);
      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      break;

    case 'after':
      $output .= ' ' . $prefix . $element['#children'] . $suffix;
      $output .= ' ' . theme('form_element_label', $variables) . "\n";
      break;

    case 'none':
    case 'attribute':
      // Output no label and no required marker, only the children.
      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      break;
  }

  if (!empty($element['#description'])) {
    $output .= '<div class="description">' . $element['#description'] . "</div>\n";
  }

  $output .= "</div></div>\n";

  return $output;
}

/**
 * @param $variables
 * @return string
 * Theme form element label
 */
function md_theme_form_element_label($variables) {
  $element = $variables['element'];
  $t = get_t();

  if ((!isset($element['#title']) || $element['#title'] === '') && empty($element['#required'])) {
    return '';
  }

  $required = !empty($element['#required']) ? theme('form_required_marker', array('element' => $element)) : '';

  $title = filter_xss_admin($element['#title']);

  $attributes = array();
  if ($element['#title_display'] == 'after') {
    $attributes['class'] = 'label-' . $element['#type'] . ' option';
  }
  elseif ($element['#title_display'] == 'invisible') {
    $attributes['class'] = 'element-invisible';
  }

  if (!empty($element['#id'])) {
    $attributes['for'] = $element['#id'];
  }
  if ($element['#type'] == 'checkbox' || $element['#type'] == 'radio') {

  }
  return ' <label' . drupal_attributes($attributes) . '>' . $t('!title !required', array(
    '!title' => $title,
    '!required' => $required
  )) . "</label>\n";
}

function md_theme_radio($variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'radio';
  element_set_attributes($element, array(
    'id',
    'name',
    '#return_value' => 'value'
  ));

  if (isset($element['#return_value']) && $element['#value'] !== FALSE && $element['#value'] == $element['#return_value']) {
    $element['#attributes']['checked'] = 'checked';
  }
  _form_set_class($element, array('form-input-radio'));
  $element['#attributes']['class'][] = 'input-radio';
  return '<input' . drupal_attributes($element['#attributes']) . ' />';
}

